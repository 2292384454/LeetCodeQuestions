    /*
    //互斥锁实现
    class FooBar {
        private final int n;
        private boolean firstFooOver = false;//用于控制第一个输出的是foo还是bar，后续会自动交替输出
        private final Object lock = new Object();

        public FooBar(int n) {
            this.n = n;
        }

        public void foo(Runnable printFoo) throws InterruptedException {
            for (int i = 0; i < n; i++) {
                synchronized (lock) {
                    // printFoo.run() outputs "foo". Do not change or remove this line.
                    printFoo.run();
                    firstFooOver = true;//第一次输出foo完成，后续的顺序控制就交给线程切换了
                    lock.notify();//唤醒bar
                    //如果i<n-1说明一会还会再输出一次foo，foo线程可以释放锁等待被bar唤醒
                    //否则不需要等待，已经完成n次foo的输出
                    if (i < n - 1)
                        lock.wait();
                }
            }
        }

        public void bar(Runnable printBar) throws InterruptedException {
            for (int i = 0; i < n; i++) {
                synchronized (lock) {
                    while (!firstFooOver) lock.wait();
                    // printBar.run() outputs "bar". Do not change or remove this line.
                    printBar.run();
                    lock.notify();//唤醒foo
                    //如果i<n-1说明一会还会再输出一次bar，bar线程可以释放锁等待被foo唤醒
                    //否则不需要等待，已经完成n次bar的输出
                    if (i < n - 1)
                        lock.wait();
                }
            }
        }
    }
//runtime:25 ms
//memory:38.3 MB
*/
    //信号量实现
    class FooBar {
        private final int n;
        private final Semaphore fooSem = new Semaphore(1);
        private final Semaphore barSem = new Semaphore(0);

        public FooBar(int n) {
            this.n = n;
        }

        public void foo(Runnable printFoo) throws InterruptedException {
            for (int i = 0; i < n; i++) {
                try {
                    fooSem.acquire();
                    printFoo.run();
                    barSem.release();
                } catch (InterruptedException ignored) {
                }
            }
        }

        public void bar(Runnable printBar) throws InterruptedException {
            for (int i = 0; i < n; i++) {
                try {
                    barSem.acquire();
                    printBar.run();
                    fooSem.release();
                } catch (InterruptedException ignored) {
                }
            }
        }
    }

//runtime:26 ms
//memory:38.8 MB
