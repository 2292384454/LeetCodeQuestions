
    /**
     * Definition for a binary tree node.
     * public class TreeNode {
     * int val;
     * TreeNode left;
     * TreeNode right;
     * TreeNode() {}
     * TreeNode(int val) { this.val = val; }
     * TreeNode(int val, TreeNode left, TreeNode right) {
     * this.val = val;
     * this.left = left;
     * this.right = right;
     * }
     * }
     */
    class Solution {
        public List<Integer> postorderTraversal(TreeNode root) {
            List<Integer> ans = new ArrayList<>();
            Stack<TreeNode> stack = new Stack<>();
            TreeNode pre = null, p = root;
            while (p != null) {
                stack.push(p);
                p = p.left;
            }
            while (!stack.isEmpty()) {
                p = stack.peek();
                if (p.right == null || p.right == pre) {
                    ans.add(p.val);
                    pre = p;
                    stack.pop();
                } else {
                    p = p.right;
                    while (p != null) {
                        stack.push(p);
                        p = p.left;
                    }
                }
            }
            return ans;
        }
    }

//runtime:1 ms
//memory:36.5 MB
