    class Solution {
        Set<String> dicSet = new HashSet<>();
        boolean[][] dp;
        String str;

        public boolean wordBreak(String s, List<String> wordDict) {
            if (s.length() == 0) return true;
            str = s;
            dicSet.addAll(wordDict);
            int n = s.length();
            dp = new boolean[n + 1][n + 1];//dp[i][j]存储s[i,j)是否存在于wordDict中（0=<i<j<=n）

            for (int i = 0; i < n; i++) {
                StringBuilder sub = new StringBuilder();
                for (int j = i + 1; j <= n; j++) {
                    sub.append(s.charAt(j - 1));
                    if (dicSet.contains(sub.toString())) dp[i][j] = true;
                }
            }
            return wordBreak(0);
        }

        public boolean wordBreak(int start) {
            if (start == str.length()) return true;
            for (int i = start; i <= str.length(); i++) {
                if (dp[start][i]) {
                    if (wordBreak(i))
                        return true;
                }
            }
            return false;
        }
    }

//runtime:N/A
//memory:N/A
//total_testcases:42
//total_correct:35
//input_formatted:"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab"
["a","aa","aaa","aaaa","aaaaa","aaaaaa","aaaaaaa","aaaaaaaa","aaaaaaaaa","aaaaaaaaaa"]
//expected_output:false
//code_output:
//runtime_error:
//last_testcase:"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab" ["a","aa","aaa","aaaa","aaaaa","aaaaaa","aaaaaaa","aaaaaaaa","aaaaaaaaa","aaaaaaaaaa"]
