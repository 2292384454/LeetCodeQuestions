    class Solution {
        public int findKthLargest(int[] nums, int k) {
            //快排的思路
            return find(nums, k, 0, nums.length - 1);
        }

        private Integer find(int[] nums, int k, int left, int right) {
            if (left <= right) {
                int index = partition(nums, left, right);
                if (index == nums.length - k) return nums[index];
                Integer res1 = find(nums, k, left, index - 1);
                Integer res2 = find(nums, k, index + 1, right);
                return res1 == null ? res2 : res1;
            }
            return null;
        }

        //以nums[left]为枢轴，将比它小的都放在它的左边，比它大的都放在它的右边，返回枢轴的最终位置。
        private int partition(int[] nums, int left, int right) {
            int temp = nums[left];
            while (right > left) {
                while (right > left && nums[right] >= temp) right--;
                nums[left] = nums[right];
                while (right > left && nums[left] <= temp) left++;
                nums[right] = nums[left];
            }
            nums[right] = temp;
            return right;
        }
    }

//runtime:11 ms
//memory:39.5 MB
