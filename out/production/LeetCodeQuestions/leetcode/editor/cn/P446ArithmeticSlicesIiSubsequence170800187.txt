    class Solution {
        public int numberOfArithmeticSlices(int[] nums) {
            if (nums == null || nums.length < 3) return 0;
            int n = nums.length;
            AtomicInteger ans = new AtomicInteger();
            // dp[i]存储nums[0:i]中以nums[i]为最后一个元素的所有子等差数组的<公差,最大长度>，
            // dp[i]中所有第二个元素大于2的数组的数量就是nums[0:i]所有为等差数组的子数组的个数
            ArrayList<HashMap<Long, Integer>> dp = new ArrayList<>(n);
            for (int i = 0; i < n; i++) dp.add(new HashMap<>());
            for (int i = 1; i < n; i++) {
                for (int j = 0; j < i; j++) {
                    long sub = (long) nums[i] - nums[j];
                    AtomicBoolean flag = new AtomicBoolean(false);
                    int finalI = i;
                    dp.get(j).forEach((tolerance, len) -> {
                        if (sub == tolerance && len >= 2) {
                            flag.set(true);
                            dp.get(finalI).put(sub, len + 1);
                        }
                    });
                    if (!flag.get()) dp.get(i).put(sub, 2);
                }
            }
            for (HashMap<Long, Integer> map : dp) {
                map.forEach((tolerance, len) -> {
                    if (len >= 3) {
                        if (tolerance == 0)
                            //C(len-1,2)+C(len-1,3)+……+C(len-1,len-1)
                            // =2^(len-1)-1-(len-1)
                            // =(1 << (len - 1))-len
                            ans.addAndGet((1 << (len - 1)) - len);
                        else
                            ans.addAndGet(Math.toIntExact(len - 2));
                    }
                });
            }
            return ans.get();
        }
    }

//total_testcases:101
//total_correct:66
//input_formatted:[2,2,3,4]
//expected_output:2
//code_output:1
