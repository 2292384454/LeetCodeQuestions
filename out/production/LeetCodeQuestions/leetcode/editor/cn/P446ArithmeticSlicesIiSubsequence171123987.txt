    class Solution {
        public int numberOfArithmeticSlices(int[] nums) {
            if (nums == null || nums.length < 3) return 0;
            int n = nums.length, ans = 0;

            int firstSub = nums[1] - nums[0];
            for (int i = 1; i < n; i++) firstSub = nums[i] - nums[i - 1];
            if (firstSub == nums[1] - nums[0]) return (1 << n) - 1 - n - n * (n - 1) / 2;

            // dp[i]存储nums[0:i]中以nums[i]为最后一个元素的所有子等差数组的[公差,长度]
            ArrayList<ArrayList<long[]>> dp = new ArrayList<>(n);
            for (int i = 0; i < n; i++) dp.add(new ArrayList<>());
            for (int i = 1; i < n; i++) {
                for (int j = i - 1; j >= 0; j--) {
                    long sub = (long) nums[i] - nums[j];
                    dp.get(i).add(new long[]{sub, 2});
                    for (long[] tolerance_len : dp.get(j)) {
                        long tolerance = tolerance_len[0];
                        int len = (int) tolerance_len[1];
                        if (sub == tolerance && len >= 2) {
                            dp.get(i).add(new long[]{sub, len + 1});
                            ans++;
                        }
                    }
                }
            }
            return ans;
        }
    }

//total_testcases:101
//total_correct:89
//input_formatted:[2,4,6,8,10]
//expected_output:7
//code_output:16
