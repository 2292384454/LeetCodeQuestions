
    /**
     * Definition for a binary tree node.
     * public class TreeNode {
     * int val;
     * TreeNode left;
     * TreeNode right;
     * TreeNode() {}
     * TreeNode(int val) { this.val = val; }
     * TreeNode(int val, TreeNode left, TreeNode right) {
     * this.val = val;
     * this.left = left;
     * this.right = right;
     * }
     * }
     */
    class Solution {

        public int countNodes(TreeNode root) {
            if (root == null) return 0;
            TreeNode p = root;
            //计算二叉树深度
            int totalDepth = 0;
            while (p != null) {
                totalDepth++;
                p = p.left;
            }
            //该二叉树最多可能的节点数和最少可能的节点数
            int low = 1 << (totalDepth - 1), high = (1 << totalDepth) - 1,mid;
            while (low <= high) {
                mid = low + (high - low) / 2;
                if (isExisting(root, mid) && !isExisting(root, mid + 1))
                    return mid;
                else if (isExisting(root, mid) && isExisting(root, mid + 1))
                    low = mid + 1;
                else high = mid - 1;
            }
            return low;
        }

        /**
         * @param root 树
         * @param num  节点编号
         * @return 对于以root为根节点的完全二叉树中，按照从1到n的层序遍历顺序进行编号。返回编号为num的节点是否存在
         */
        public boolean isExisting(TreeNode root, int num) {
            TreeNode p = root;
            Stack<Integer> stack = new Stack<>();
            while (num > 1) {
                stack.push(num & 1);
                num >>= 1;
            }
            while (!stack.isEmpty()) {
                int x = stack.pop();
                if (p == null) return false;
                p = (x == 0) ? p.left : p.right;
            }
            return p != null;
        }
    }

//runtime:1 ms
//memory:40.7 MB
