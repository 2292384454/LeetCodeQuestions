    class Solution {
        public NestedInteger deserialize(String s) {
            return helper(s).getList().get(0);
        }

        public NestedInteger helper(String s) {
            NestedInteger ans = new NestedInteger();
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < s.length(); i++) {
                char c = s.charAt(i);
                if (c == '[') {
                    int j = i;
                    int count = 1;
                    i++;
                    while (count != 0) {
                        if (s.charAt(i) == '[') {
                            count++;
                        } else if (s.charAt(i) == ']') {
                            count--;
                        }
                        i++;
                    }
                    ans.add(helper(s.substring(j + 1, i - 1)));
                } else if (c == ',') {
                    try {
                        ans.add(new NestedInteger(Integer.parseInt(sb.toString())));
                    } catch (NumberFormatException ignored) {
                    }
                    sb = new StringBuilder();
                } else {
                    sb.append(c);
                    if (i == s.length() - 1) {
                        try {
                            ans.add(new NestedInteger(Integer.parseInt(sb.toString())));
                        } catch (NumberFormatException ignored) {
                        }
                    }
                }
            }
            return ans;
        }
    }


//runtime:4 ms
//memory:40.4 MB
