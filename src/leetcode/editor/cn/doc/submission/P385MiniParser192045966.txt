    class Solution {
        String s;
        /**
         * 记录左括号与右括号
         */
        HashMap<Integer, Integer> map = new HashMap<>();

        public NestedInteger deserialize(String s) {
            this.s = s;
            Deque<Integer> stack = new LinkedList<>();
            for (int i = 0; i < s.length(); i++) {
                char c = s.charAt(i);
                if (c == '[') {
                    stack.push(i);
                } else if (c == ']') {
                    map.put(stack.pop(), i);
                }
            }
            return helper(0, s.length()).getList().get(0);
        }

        public NestedInteger helper(int start, int end) {
            NestedInteger ans = new NestedInteger();
            StringBuilder sb = new StringBuilder();
            for (int i = start; i < end; i++) {
                char c = s.charAt(i);
                if (c == '[') {
                    int j = map.get(i);
                    // 左右括号之间的内容，递归
                    ans.add(helper(i + 1, j));
                    i = j + 1;
                } else if (c == ',') {
                    // 数字添加到 ans 中
                    try {
                        ans.add(new NestedInteger(Integer.parseInt(sb.toString())));
                    } catch (NumberFormatException ignored) {
                    }
                    sb = new StringBuilder();
                } else {
                    sb.append(c);
                    // 到结尾了，数字添加到 ans 中
                    if (i == end - 1) {
                        try {
                            ans.add(new NestedInteger(Integer.parseInt(sb.toString())));
                        } catch (NumberFormatException ignored) {
                        }
                    }
                }
            }
            return ans;
        }
    }


//runtime:6 ms
//memory:40.2 MB
